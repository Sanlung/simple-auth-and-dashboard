openapi: 3.0.0
info:
  title: Simple Auth & Dashboard Data API
  description: Simple Auth & Dashboard is a demonstration web app which features user authentication and a simple dashboard displaying user session data. The app is created on the Next.js/Express frameworks and employs Auth0 for user authentication. The application uses Next.js API routes as proxies in making calls to Auth0, or to its own server's '/api/v1' end point, both of which require Auth0-issued access token to authenticate access. This documentation is of the application's own API, i.e., user and session data displayed in the dashboard. Please visit the [authentication](https://auth0.com/docs/api/authentication#introduction) and [management](https://auth0.com/docs/api/management/v2#introduction) documentations for Auth0 APIs.
  contact:
    name: Chung Kao
    email: chungckao@gmail.com
  version: "1.0"
servers:
  - url: http://localhost:3001/api/v1
    description: development ApiUrl
  - url: https://simpleauthanddashboard.onrender.com/api/v1
    description: production ApiUrl
  - url: https://dev-lp2pqg88am2bfulk.us.auth0.com
    description: development Auth0Url
  - url: https://simeple-auth-and-dashboard.jp.auth0.com
    description: production Auth0Url
paths:
  /oauth/token:
    post:
      tags:
        - Auth0
      summary: Get Access Token
      operationId: GetAccessToken
      description: Retrieve Auth0 access token to access application API
      parameters: []
      requestBody:
        description: `client_id`, `client_secret`, `audience`, `grant_type` are required
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAccessTokenRequest"
            example:
              client_id: CLIENT_ID
              client_secret: CLIENT_SECRET
              audience: https://simpleauthanddashboard.onrender.com/api/v1/
              grant_type: client_credentials
        required: true
      responses:
        "200":
          description: OK - returns a token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccessTokenResponse"
              example:
                access_token: yugTdf98)...bnhg#Apz
                scope: create:users read:users update:users
                expires_in: 86400
                token_type: Bearer
      deprecated: false
      security: []
  /users:
    post:
      tags:
        - Users
      summary: Create User
      operationId: CreateUser
      description: Create a new user
      parameters: []
      requestBody:
        description: `auth0_id`, `profile_name`, `email`, `created_at`, and `logins_count` are required and `auth0_id` is unique
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            example:
              auth0_id: auth0|123456789101213
              profile_name: johndoe
              email: johndoe@gmail.com
              created_at: 2023-01-23T00:00:01.001Z
              logins_count: 9
        required: true
      responses:
        "201":
          description: Created - returns the new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
              example:
                msg: User was created successfully
                user:
                  id: 5
                  auth0_id: auth0|123456789101213
                  profile_name: johndoe
                  email: johndoe@gmail.com
                  created_at: 2023-01-23T00:00:01.001Z
                  logins_count: 9
      deprecated: false
      security:
        - bearer: []
    get:
      tags:
        - Users
      summary: Get All Users
      operationId: GetAllUsers
      description: Get all the existing users
      parameters: []
      responses:
        "200":
          description: OK - returns all the users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllUsersResponse"
              example:
                users:
                  - id: 5
                    auth0_id: auth0|123456789101213
                    profile_name: johndoe
                    email: johndoe@gmail.com
                    created_at: 2023-01-23T00:00:01.001Z
                    logins_count: 9
                  - id: 6
                    auth0_id: facebook|123456789111213
                    profile_name: janesmith
                    email: janesmith@gmail.com
                    created_at: 2023-01-24T12:10:24.781Z
                    logins_count: 5
                count: 2
      deprecated: false
      security:
        - bearer: []
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The Auth0 ID for the user
    get:
      tags:
        - Users
      summary: Get Single User
      operationId: GetSingleUser
      description: Get one user by Auth0 ID - **Not in Use**
      parameters:
        - name: id
          in: path
          description: The Auth0 user ID
          required: true
          style: simple
          schema:
            type: string
            example: auth0|123456789101213
      responses:
        "200":
          description: OK - returns the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSingleUserResponse"
              example:
                user:
                  id: 5
                  auth0_id: auth0|123456789101213
                  profile_name: johndoe
                  email: johndoe@gmail.com
                  created_at: 2023-01-23T00:00:01.001Z
                  logins_count: 9
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Users
      summary: Update User
      operationId: UpdateUser
      description: Update one user by Auth0 ID
      parameters:
        - name: id
          in: path
          description: The Auth0 user ID
          required: true
          style: simple
          schema:
            type: string
            example: auth0|123456789101213
      requestBody:
        description: Can update either `profile_name` or `logins_count` in a single request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            example:
              profile_name: John Doe
        required: true
      responses:
        "200":
          description: OK - returns the updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
              example:
                msg: User was updated successfully
                user:
                  id: 5
                  auth0_id: auth0|123456789101213
                  profile_name: John Doe
                  email: johndoe@gmail.com
                  created_at: 2023-01-23T00:00:01.001Z
                  logins_count: 8
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: DeleteUser
      description: Delete one user by Auth0 ID and cascade delete all sessions recorded for this user - **Not in Use**
      parameters:
        - name: id
          in: path
          description: Auth0 user ID
          required: true
          style: simple
          schema:
            type: string
            example: auth0|123456789101213
      responses:
        "200":
          description: OK - returns the deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
              example:
                msg: User was removed successfully
                user:
                  id: 5
                  auth0_id: auth0|123456789101213
                  profile_name: John Doe
                  email: johndoe@gmail.com
                  created_at: 2023-01-23T00:00:01.001Z
                  logins_count: 8
      deprecated: false
      security:
        - bearer: []
  /sessions:
    post:
      tags:
        - Sessions
      summary: Create Session
      operationId: CreateSession
      description: Create a new session
      parameters: []
      requestBody:
        description: `auth0_id` and `session_start` are required and `auth0_id` must exists in users
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
            example:
              auth0_id: auth0|123456789101213
              session_start: 2023-01-23T00:00:01.001Z
        required: true
      responses:
        "201":
          description: Created - returns the new session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSessionResponse"
              example:
                msg: Session was created successfully
                session:
                  id: 5
                  auth0_id: auth0|123456789101213
                  session_start: 2023-01-23T00:00:01.001Z
                  session_end: --
      deprecated: false
      security:
        - bearer: []
    get:
      tags:
        - Sessions
      summary: Get Week Sessions
      operationId: GetWeekSessions
      description: Get the past week's sessions
      parameters: []
      responses:
        "200":
          description: OK - returns the past week's sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWeekSessionsResponse"
              example:
                sessions:
                  - id: 5
                    auth0_id: auth0|123456789101213
                    session_start: 2023-01-23T00:00:01.001Z
                    session_end: 2023-01-24T12:10:24.781Z
                  - id: 6
                    auth0_id: facebook|123456789111213
                    session_start: 2023-01-24T19:35:56.123Z
                    session_end: --
                count: 2
      deprecated: false
      security:
        - bearer: []
  /sessions/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: number
        required: true
        description: The session ID
    get:
      tags:
        - Sessions
      summary: Get Single Session
      operationId: GetSingleSession
      description: Get one session by session ID - **Not in Use**
      parameters:
        - name: id
          in: path
          description: The session ID
          required: true
          style: simple
          schema:
            type: number
            example: 13
      responses:
        "200":
          description: OK - returns the session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSingleSessionResponse"
              example:
                session:
                  id: 13
                  auth0_id: auth0|123456789101213
                  session_start: 2023-01-24T19:35:56.123Z
                  session_end: 2023-01-24T12:10:24.781Z
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Sessions
      summary: Update Session
      operationId: UpdateSession
      description: Update one session by session ID
      parameters:
        - name: id
          in: path
          description: The session ID
          required: true
          style: simple
          schema:
            type: number
            example: 5
      requestBody:
        description: Can update only `session_end`
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSessionRequest"
            example:
              session_end: 2023-01-24T19:35:56.123Z
        required: true
      responses:
        "200":
          description: OK - returns the updated session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSessionResponse"
              example:
                msg: Session was updated successfully
                session:
                  id: 5
                  auth0_id: auth0|123456789101213
                  session_start: 2023-01-23T00:00:01.001Z
                  session_end: 2023-01-24T12:10:24.781Z
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Sessions
      summary: Delete Session
      operationId: DeleteSession
      description: Delete one user by Auth0 ID - **Not in Use**
      parameters:
        - name: id
          in: path
          description: The session ID
          required: true
          style: simple
          schema:
            type: number
            example: 13
      responses:
        "200":
          description: OK - returns the deleted session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSessionResponse"
              example:
                msg: Session was removed successfully
                session:
                  id: 5
                  auth0_id: auth0|123456789101213
                  session_start: 2023-01-23T00:00:01.001Z
                  session_end: 2023-01-24T12:10:24.781Z
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    GetAccessTokenRequest:
      title: GetAccessTokenRequest
      required:
        - client_id
        - client_secret
        - audience
        - grant_type
      type: object
      properties:
        client_id:
          type: string
          description: Auth0 client ID
        client_secret:
          type: string
          description: Auth0 client secret
        audience:
          type: string
          description: the end-point to receive the access token
        grant_type:
          type: string
          description: client credential flow used for access
      example:
        client_id: CLIENT_ID
        client_secret: CLIENT_SECRET
        audience: https://simple-auth-and-dashboard.onrender.com/api/v1/
        grant_type: client_credentials
    GetAccessTokenResponse:
      title: GetAccessTokenResponse
      type: object
      properties:
        access_token:
          type: string
          description: JWT token
        scope:
          type: string
          description: space-separated list of scope of access
        expires_in:
          type: string
          description: token expiration timeframe
        token_type:
          type: string
          description: type of token
      example:
        access_token: yugTdf98)...bnhg#Apz
        scope: create:users read:users update:users
        expires_in: 86400
        token_type: Bearer
    CreateUserRequest:
      title: CreateUserRequest
      required:
        - auth0_id
        - profile_name
        - email
        - created_at
        - logins_count
      unique:
        - profile_name
      type: object
      properties:
        auth0_id:
          type: string
        profile_name:
          type: string
        email:
          type: string
        created_at:
          type: string
        logins_count:
          type: number
      example:
        auth0_id: auth0|123456789101213
        profile_name: johndoe
        email: johndoe@gmail.com
        created_at: 2023-01-23T00:00:01.001Z
        logins_count: 9
    CreateUserResponse:
      title: CreateUserResponse
      type: object
      properties:
        msg:
          type: string
        user:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            profile_name:
              type: string
            email:
              type: string
            created_at:
              type: string
            logins_count:
              type: number
      example:
        msg: User was created successfully
        user:
          id: 5
          auth0_id: auth0|123456789101213
          profile_name: johndoe
          email: johndoe@gmail.com
          created_at: 2023-01-23T00:00:01.001Z
          logins_count: 9
    GetAllUsersResponse:
      title: GetAllUsersResponse
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              auth0_id:
                type: string
              profile_name:
                type: string
              email:
                type: string
              created_at:
                type: string
              logins_count:
                type: number
        count:
          type: number
      example:
        users:
          - id: 5
            auth0_id: auth0|123456789101213
            profile_name: johndoe
            email: johndoe@gmail.com
            created_at: 2023-01-23T00:00:01.001Z
            logins_count: 9
          - id: 6
            auth0_id: facebook|123456789111213
            profile_name: janesmith
            email: janesmith@gmail.com
            created_at: 2023-01-24T12:10:24.781Z
            logins_count: 5
        count: 15
    GetSingleUserResponse:
      title: GetSingleUserResponse
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            profile_name:
              type: string
            email:
              type: string
            created_at:
              type: string
            logins_count:
              type: number
      example:
        user:
          id: 5
          auth0_id: auth0|123456789101213
          profile_name: johndoe
          email: johndoe@gmail.com
          created_at: 2023-01-23T00:00:01.001Z
          logins_count: 9
    UpdateUserRequest:
      title: UpdateUserRequest
      required:
        - profile_name
        - logins_count
      type: object
      properties:
        profile_name:
          type: string
        logins_count:
          type: number
      example:
        profile_name: John Doe
        logins_count: 8
    UpdateUserResponse:
      title: UpdateUserResponse
      type: object
      properties:
        msg:
          type: string
        user:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            profile_name:
              type: string
            email:
              type: string
            created_at:
              type: string
            logins_count:
              type: number
      example:
        msg: User was updated successfully
        user:
          id: 5
          auth0_id: auth0|123456789101213
          profile_name: John Doe
          email: johndoe@gmail.com
          created_at: 2023-01-23T00:00:01.001Z
          logins_count: 8
    DeleteUserResponse:
      title: DeleteUserResponse
      type: object
      properties:
        msg:
          type: string
        user:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            profile_name:
              type: string
            email:
              type: string
            created_at:
              type: string
            logins_count:
              type: number
      example:
        msg: User was removed successly
        user:
          id: 5
          auth0_id: auth0|123456789101213
          profile_name: John Doe
          email: johndoe@gmail.com
          created_at: 2023-01-23T00:00:01.001Z
          Logins_count: 8
    CreateSessionRequest:
      title: CreateSessionRequest
      required:
        - auth0_id
        - session_start
      type: object
      properties:
        auth0_id:
          type: string
        session_start:
          type: srting
      example:
        auth0_id: auth0|123456789101213
        session_start: 2023-01-23T00:00:01.001Z
    CreateSessionResponse:
      title: CreateSessionResponse
      type: object
      properties:
        msg:
          type: string
        session:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            session_start:
              type: string
            session_end:
              type: string
      example:
        msg: Session was created successfully
        session:
          id: 13
          auth0_id: auth0|123456789101213
          session_start: 2023-01-23T00:00:01.001Z
          session_end: --
    GetWeekSessionsResponse:
      title: GetWeekSessionsResponse
      type: object
      properties:
        sessions:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              auth0_id:
                type: string
              session_staret:
                type: string
              session_end:
                type: string
        count:
          type: number
      example:
        sessions:
          - id: 6
            auth0_id: facebook|123456789111213
            session_start: 2023-01-24T19:35:56.123Z
            session_end: --
          - id: 5
            auth0_id: auth0|123456789101213
            session_start: 2023-01-23T00:00:01.001Z
            session_end: 2023-01-24T12:10:24.781Z
        count: 2
    GetSingleSessionResponse:
      title: GetSingleSessionResponse
      type: object
      properties:
        session:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            session_start:
              type: string
            session_end:
              type: string
      example:
        session:
          id: 13
          auth0_id: auth0|123456789101213
          session_start: 2023-01-23T00:00:01.001Z
          session_end: 2023-01-24T12:10:24.781Z
    UpdateSessionRequest:
      title: UpdateSessionRequest
      required:
        - session_end
      type: object
      properties:
        session_end:
          type: string
      example:
        session_end: 2023-01-24T19:35:56.123Z
    UpdateSessionResponse:
      title: UpdateSessionResponse
      type: object
      properties:
        msg:
          type: string
        session:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            session_start:
              type: string
            session_end:
              type: string
      example:
        msg: Session was updated successfully
        session:
          id: 13
          auth0_id: auth0|123456789101213
          session_start: 2023-01-23T00:00:01.001Z
          session_end: 2023-01-24T19:35:56.123Z
    DeleteSessionResponse:
      title: DeleteSessionResponse
      type: object
      properties:
        msg:
          type: string
        session:
          type: object
          properties:
            id:
              type: number
            auth0_id:
              type: string
            session_start:
              type: string
            session_end:
              type: string
      example:
        msg: Session was deleted successly
        session:
          id: 13
          auth0_id: auth0|123456789101213
          session_start: 2023-01-23T00:00:01.001Z
          session_end: 2023-01-24T12:10:24.781Z
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Auth0
    description: Get Auth0 access token - Use Auth0Url as the base URL
  - name: Users
    description: CRUD operations on user data - Use ApiUrl as the base URL
  - name: Sessions
    description: GET, POST and PATCH session data - Use ApiUrl as the base URL
